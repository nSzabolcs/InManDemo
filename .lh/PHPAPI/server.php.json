{
    "sourceFile": "PHPAPI/server.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1753270653250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753271704349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+<?php\n+header(\"Access-Control-Allow-Origin: *\");\n+header(\"Access-Control-Allow-Headers: Content-Type, Authorization\");\n+header(\"Content-Type: application/json\");\n+header(\"Access-Control-Allow-Methods: GET, POST, PATCH, DELETE, OPTIONS\");\n+\n+\n+$method = $_SERVER['REQUEST_METHOD'];\n+$requestUri = explode('/', trim($_SERVER['REQUEST_URI'], '/'));\n+\n+$apiIndex = array_search('api', $requestUri);\n+if ($apiIndex === false || !isset($requestUri[$apiIndex + 1])) {\n+    http_response_code(400);\n+    echo json_encode(['error' => 'Invalid endpoint']);\n+    exit;\n+}\n+\n+$table = $requestUri[$apiIndex + 1];\n+$id = $requestUri[$apiIndex + 2] ?? null;\n+\n+// biztonságos tábla név ellenőrzés\n+function isValidTableName($name) {\n+    return preg_match('/^[a-zA-Z0-9_]+$/', $name);\n+}\n+\n+// MySQL kapcsolat\n+$host = 'localhost';\n+$db   = 'sugomedi_inmandemo';\n+$user = 'sugomedi_inmandemouser';\n+$pass = 'WZpHO0q6kC,BG@i!';\n+$charset = 'utf8mb4';\n+\n+$dsn = \"mysql:host=$host;dbname=$db;charset=$charset\";\n+$options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n+\n+try {\n+    $pdo = new PDO($dsn, $user, $pass, $options);\n+} catch (PDOException $e) {\n+    http_response_code(500);\n+    echo json_encode(['error' => $e->getMessage()]);\n+    exit;\n+}\n+\n+// JSON input beolvasása\n+$input = json_decode(file_get_contents('php://input'), true);\n+\n+// REST logika\n+try {\n+    if (!isValidTableName($table)) {\n+        http_response_code(400);\n+        echo json_encode(['error' => 'Invalid table name']);\n+        exit;\n+    }\n+\n+    switch ($method) {\n+        case 'GET':\n+            if ($id) {\n+                $stmt = $pdo->prepare(\"SELECT * FROM `$table` WHERE id = ?\");\n+                $stmt->execute([$id]);\n+                $row = $stmt->fetch(PDO::FETCH_ASSOC);\n+                if (!$row) {\n+                    http_response_code(404);\n+                    echo json_encode(['error' => 'Not found']);\n+                } else {\n+                    echo json_encode($row);\n+                }\n+            } else {\n+                $stmt = $pdo->query(\"SELECT * FROM `$table`\");\n+                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);\n+                echo json_encode($rows);\n+            }\n+            break;\n+\n+        case 'POST':\n+            if (!$input) throw new Exception(\"Invalid JSON\");\n+            $columns = implode('`, `', array_keys($input));\n+            $placeholders = implode(', ', array_fill(0, count($input), '?'));\n+            $stmt = $pdo->prepare(\"INSERT INTO `$table` (`$columns`) VALUES ($placeholders)\");\n+            $stmt->execute(array_values($input));\n+            echo json_encode(['id' => $pdo->lastInsertId()]);\n+            break;\n+\n+        case 'PATCH':\n+            if (!$id) throw new Exception(\"Missing ID\");\n+            if (!$input) throw new Exception(\"Invalid JSON\");\n+            $set = implode(', ', array_map(fn($k) => \"`$k` = ?\", array_keys($input)));\n+            $stmt = $pdo->prepare(\"UPDATE `$table` SET $set WHERE id = ?\");\n+            $stmt->execute([...array_values($input), $id]);\n+            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n+            break;\n+\n+        case 'DELETE':\n+            if (!$id) throw new Exception(\"Missing ID\");\n+            $stmt = $pdo->prepare(\"DELETE FROM `$table` WHERE id = ?\");\n+            $stmt->execute([$id]);\n+            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n+            break;\n+\n+        case 'OPTIONS':\n+            // előzetes CORS kérés válasza\n+            http_response_code(200);\n+            break;\n+\n+        default:\n+            http_response_code(405);\n+            echo json_encode(['error' => 'Method not allowed']);\n+            break;\n+    }\n+} catch (Exception $e) {\n+    http_response_code(500);\n+    echo json_encode(['error' => $e->getMessage()]);\n+}\n"
                },
                {
                    "date": 1753271728078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,116 +109,4 @@\n } catch (Exception $e) {\n     http_response_code(500);\n     echo json_encode(['error' => $e->getMessage()]);\n }\n-<?php\n-header(\"Access-Control-Allow-Origin: *\");\n-header(\"Access-Control-Allow-Headers: Content-Type, Authorization\");\n-header(\"Content-Type: application/json\");\n-header(\"Access-Control-Allow-Methods: GET, POST, PATCH, DELETE, OPTIONS\");\n-\n-\n-$method = $_SERVER['REQUEST_METHOD'];\n-$requestUri = explode('/', trim($_SERVER['REQUEST_URI'], '/'));\n-\n-$apiIndex = array_search('api', $requestUri);\n-if ($apiIndex === false || !isset($requestUri[$apiIndex + 1])) {\n-    http_response_code(400);\n-    echo json_encode(['error' => 'Invalid endpoint']);\n-    exit;\n-}\n-\n-$table = $requestUri[$apiIndex + 1];\n-$id = $requestUri[$apiIndex + 2] ?? null;\n-\n-// biztonságos tábla név ellenőrzés\n-function isValidTableName($name) {\n-    return preg_match('/^[a-zA-Z0-9_]+$/', $name);\n-}\n-\n-// MySQL kapcsolat\n-$host = 'localhost';\n-$db   = 'inmandemo';\n-$user = 'root';\n-$pass = '';\n-$charset = 'utf8mb4';\n-\n-$dsn = \"mysql:host=$host;dbname=$db;charset=$charset\";\n-$options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n-\n-try {\n-    $pdo = new PDO($dsn, $user, $pass, $options);\n-} catch (PDOException $e) {\n-    http_response_code(500);\n-    echo json_encode(['error' => $e->getMessage()]);\n-    exit;\n-}\n-\n-// JSON input beolvasása\n-$input = json_decode(file_get_contents('php://input'), true);\n-\n-// REST logika\n-try {\n-    if (!isValidTableName($table)) {\n-        http_response_code(400);\n-        echo json_encode(['error' => 'Invalid table name']);\n-        exit;\n-    }\n-\n-    switch ($method) {\n-        case 'GET':\n-            if ($id) {\n-                $stmt = $pdo->prepare(\"SELECT * FROM `$table` WHERE id = ?\");\n-                $stmt->execute([$id]);\n-                $row = $stmt->fetch(PDO::FETCH_ASSOC);\n-                if (!$row) {\n-                    http_response_code(404);\n-                    echo json_encode(['error' => 'Not found']);\n-                } else {\n-                    echo json_encode($row);\n-                }\n-            } else {\n-                $stmt = $pdo->query(\"SELECT * FROM `$table`\");\n-                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);\n-                echo json_encode($rows);\n-            }\n-            break;\n-\n-        case 'POST':\n-            if (!$input) throw new Exception(\"Invalid JSON\");\n-            $columns = implode('`, `', array_keys($input));\n-            $placeholders = implode(', ', array_fill(0, count($input), '?'));\n-            $stmt = $pdo->prepare(\"INSERT INTO `$table` (`$columns`) VALUES ($placeholders)\");\n-            $stmt->execute(array_values($input));\n-            echo json_encode(['id' => $pdo->lastInsertId()]);\n-            break;\n-\n-        case 'PATCH':\n-            if (!$id) throw new Exception(\"Missing ID\");\n-            if (!$input) throw new Exception(\"Invalid JSON\");\n-            $set = implode(', ', array_map(fn($k) => \"`$k` = ?\", array_keys($input)));\n-            $stmt = $pdo->prepare(\"UPDATE `$table` SET $set WHERE id = ?\");\n-            $stmt->execute([...array_values($input), $id]);\n-            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n-            break;\n-\n-        case 'DELETE':\n-            if (!$id) throw new Exception(\"Missing ID\");\n-            $stmt = $pdo->prepare(\"DELETE FROM `$table` WHERE id = ?\");\n-            $stmt->execute([$id]);\n-            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n-            break;\n-\n-        case 'OPTIONS':\n-            // előzetes CORS kérés válasza\n-            http_response_code(200);\n-            break;\n-\n-        default:\n-            http_response_code(405);\n-            echo json_encode(['error' => 'Method not allowed']);\n-            break;\n-    }\n-} catch (Exception $e) {\n-    http_response_code(500);\n-    echo json_encode(['error' => $e->getMessage()]);\n-}\n"
                },
                {
                    "date": 1753271876840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n // MySQL kapcsolat\n $host = 'localhost';\n $db   = 'sugomedi_inmandemo';\n $user = 'sugomedi_inmandemouser';\n-$pass = 'WZpHO0q6kC,BG@i!';\n+$pass = 'Sr9xEElVFb5Ei7nn';\n $charset = 'utf8mb4';\n \n $dsn = \"mysql:host=$host;dbname=$db;charset=$charset\";\n $options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n"
                },
                {
                    "date": 1753275245109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,14 +23,23 @@\n     return preg_match('/^[a-zA-Z0-9_]+$/', $name);\n }\n \n // MySQL kapcsolat\n+/*\n $host = 'localhost';\n $db   = 'sugomedi_inmandemo';\n $user = 'sugomedi_inmandemouser';\n $pass = 'Sr9xEElVFb5Ei7nn';\n $charset = 'utf8mb4';\n+*/\n \n+// MySQL kapcsolat\n+$host = 'localhost';\n+$db   = 'inmandemo';\n+$user = 'root';\n+$pass = '';\n+$charset = 'utf8mb4';\n+\n $dsn = \"mysql:host=$host;dbname=$db;charset=$charset\";\n $options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n \n try {\n"
                },
                {
                    "date": 1753708025339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+<?php\n+header(\"Access-Control-Allow-Origin: *\");\n+header(\"Access-Control-Allow-Headers: Content-Type, Authorization\");\n+header(\"Content-Type: application/json\");\n+header(\"Access-Control-Allow-Methods: GET, POST, PATCH, DELETE, OPTIONS\");\n+\n+\n+$method = $_SERVER['REQUEST_METHOD'];\n+$requestUri = explode('/', trim($_SERVER['REQUEST_URI'], '/'));\n+\n+$apiIndex = array_search('api', $requestUri);\n+if ($apiIndex === false || !isset($requestUri[$apiIndex + 1])) {\n+    http_response_code(400);\n+    echo json_encode(['error' => 'Invalid endpoint']);\n+    exit;\n+}\n+\n+$table = $requestUri[$apiIndex + 1];\n+$id = $requestUri[$apiIndex + 2] ?? null;\n+\n+// biztonságos tábla név ellenőrzés\n+function isValidTableName($name) {\n+    return preg_match('/^[a-zA-Z0-9_]+$/', $name);\n+}\n+\n+// MySQL kapcsolat\n+\n+$host = 'localhost';\n+$db   = 'sugomedi_inmandemo';\n+$user = 'sugomedi_inmandemouser';\n+$pass = 'Sr9xEElVFb5Ei7nn';\n+$charset = 'utf8mb4';\n+\n+/*\n+// MySQL kapcsolat\n+$host = 'localhost';\n+$db   = 'inmandemo';\n+$user = 'root';\n+$pass = '';\n+$charset = 'utf8mb4';\n+*/\n+$dsn = \"mysql:host=$host;dbname=$db;charset=$charset\";\n+$options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n+\n+try {\n+    $pdo = new PDO($dsn, $user, $pass, $options);\n+} catch (PDOException $e) {\n+    http_response_code(500);\n+    echo json_encode(['error' => $e->getMessage()]);\n+    exit;\n+}\n+\n+// JSON input beolvasása\n+$input = json_decode(file_get_contents('php://input'), true);\n+\n+// REST logika\n+try {\n+    if (!isValidTableName($table)) {\n+        http_response_code(400);\n+        echo json_encode(['error' => 'Invalid table name']);\n+        exit;\n+    }\n+\n+    switch ($method) {\n+        case 'GET':\n+            if ($id) {\n+                $stmt = $pdo->prepare(\"SELECT * FROM `$table` WHERE id = ?\");\n+                $stmt->execute([$id]);\n+                $row = $stmt->fetch(PDO::FETCH_ASSOC);\n+                if (!$row) {\n+                    http_response_code(404);\n+                    echo json_encode(['error' => 'Not found']);\n+                } else {\n+                    echo json_encode($row);\n+                }\n+            } else {\n+                $stmt = $pdo->query(\"SELECT * FROM `$table`\");\n+                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);\n+                echo json_encode($rows);\n+            }\n+            break;\n+\n+        case 'POST':\n+            if (!$input) throw new Exception(\"Invalid JSON\");\n+            $columns = implode('`, `', array_keys($input));\n+            $placeholders = implode(', ', array_fill(0, count($input), '?'));\n+            $stmt = $pdo->prepare(\"INSERT INTO `$table` (`$columns`) VALUES ($placeholders)\");\n+            $stmt->execute(array_values($input));\n+            echo json_encode(['id' => $pdo->lastInsertId()]);\n+            break;\n+\n+        case 'PATCH':\n+            if (!$id) throw new Exception(\"Missing ID\");\n+            if (!$input) throw new Exception(\"Invalid JSON\");\n+            $set = implode(', ', array_map(fn($k) => \"`$k` = ?\", array_keys($input)));\n+            $stmt = $pdo->prepare(\"UPDATE `$table` SET $set WHERE id = ?\");\n+            $stmt->execute([...array_values($input), $id]);\n+            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n+            break;\n+\n+        case 'DELETE':\n+            if (!$id) throw new Exception(\"Missing ID\");\n+            $stmt = $pdo->prepare(\"DELETE FROM `$table` WHERE id = ?\");\n+            $stmt->execute([$id]);\n+            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n+            break;\n+\n+        case 'OPTIONS':\n+            // előzetes CORS kérés válasza\n+            http_response_code(200);\n+            break;\n+\n+        default:\n+            http_response_code(405);\n+            echo json_encode(['error' => 'Method not allowed']);\n+            break;\n+    }\n+} catch (Exception $e) {\n+    http_response_code(500);\n+    echo json_encode(['error' => $e->getMessage()]);\n+}\n"
                }
            ],
            "date": 1753270653250,
            "name": "Commit-0",
            "content": "<?php\nheader(\"Access-Control-Allow-Origin: *\");\nheader(\"Access-Control-Allow-Headers: Content-Type, Authorization\");\nheader(\"Content-Type: application/json\");\nheader(\"Access-Control-Allow-Methods: GET, POST, PATCH, DELETE, OPTIONS\");\n\n\n$method = $_SERVER['REQUEST_METHOD'];\n$requestUri = explode('/', trim($_SERVER['REQUEST_URI'], '/'));\n\n$apiIndex = array_search('api', $requestUri);\nif ($apiIndex === false || !isset($requestUri[$apiIndex + 1])) {\n    http_response_code(400);\n    echo json_encode(['error' => 'Invalid endpoint']);\n    exit;\n}\n\n$table = $requestUri[$apiIndex + 1];\n$id = $requestUri[$apiIndex + 2] ?? null;\n\n// biztonságos tábla név ellenőrzés\nfunction isValidTableName($name) {\n    return preg_match('/^[a-zA-Z0-9_]+$/', $name);\n}\n\n// MySQL kapcsolat\n$host = 'localhost';\n$db   = 'inmandemo';\n$user = 'root';\n$pass = '';\n$charset = 'utf8mb4';\n\n$dsn = \"mysql:host=$host;dbname=$db;charset=$charset\";\n$options = [PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION];\n\ntry {\n    $pdo = new PDO($dsn, $user, $pass, $options);\n} catch (PDOException $e) {\n    http_response_code(500);\n    echo json_encode(['error' => $e->getMessage()]);\n    exit;\n}\n\n// JSON input beolvasása\n$input = json_decode(file_get_contents('php://input'), true);\n\n// REST logika\ntry {\n    if (!isValidTableName($table)) {\n        http_response_code(400);\n        echo json_encode(['error' => 'Invalid table name']);\n        exit;\n    }\n\n    switch ($method) {\n        case 'GET':\n            if ($id) {\n                $stmt = $pdo->prepare(\"SELECT * FROM `$table` WHERE id = ?\");\n                $stmt->execute([$id]);\n                $row = $stmt->fetch(PDO::FETCH_ASSOC);\n                if (!$row) {\n                    http_response_code(404);\n                    echo json_encode(['error' => 'Not found']);\n                } else {\n                    echo json_encode($row);\n                }\n            } else {\n                $stmt = $pdo->query(\"SELECT * FROM `$table`\");\n                $rows = $stmt->fetchAll(PDO::FETCH_ASSOC);\n                echo json_encode($rows);\n            }\n            break;\n\n        case 'POST':\n            if (!$input) throw new Exception(\"Invalid JSON\");\n            $columns = implode('`, `', array_keys($input));\n            $placeholders = implode(', ', array_fill(0, count($input), '?'));\n            $stmt = $pdo->prepare(\"INSERT INTO `$table` (`$columns`) VALUES ($placeholders)\");\n            $stmt->execute(array_values($input));\n            echo json_encode(['id' => $pdo->lastInsertId()]);\n            break;\n\n        case 'PATCH':\n            if (!$id) throw new Exception(\"Missing ID\");\n            if (!$input) throw new Exception(\"Invalid JSON\");\n            $set = implode(', ', array_map(fn($k) => \"`$k` = ?\", array_keys($input)));\n            $stmt = $pdo->prepare(\"UPDATE `$table` SET $set WHERE id = ?\");\n            $stmt->execute([...array_values($input), $id]);\n            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n            break;\n\n        case 'DELETE':\n            if (!$id) throw new Exception(\"Missing ID\");\n            $stmt = $pdo->prepare(\"DELETE FROM `$table` WHERE id = ?\");\n            $stmt->execute([$id]);\n            echo json_encode(['affectedRows' => $stmt->rowCount()]);\n            break;\n\n        case 'OPTIONS':\n            // előzetes CORS kérés válasza\n            http_response_code(200);\n            break;\n\n        default:\n            http_response_code(405);\n            echo json_encode(['error' => 'Method not allowed']);\n            break;\n    }\n} catch (Exception $e) {\n    http_response_code(500);\n    echo json_encode(['error' => $e->getMessage()]);\n}\n"
        }
    ]
}